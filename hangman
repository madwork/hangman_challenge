#!/usr/bin/ruby
#
# https://github.com/jasonswett/hangman_challenge
#

# frozen_string_literal: true

class HangmanTemplate
  attr_reader :hangman

  def initialize(hangman)
    @hangman = hangman
  end

  def initialization
  end

  def won
  end

  def lost
  end

  def correct
  end

  def incorrect
  end
end

class BasicHangmanTemplate < HangmanTemplate
  def initialization
    "#{hangman.word.mask} life left: #{hangman.life}"
  end

  def won
    "#{hangman.word.secret} YOU WIN!"
  end

  def lost
    "#{hangman.word.mask} YOU LOSE!"
  end

  def correct
    "#{hangman.word.mask} life left: #{hangman.life}"
  end

  def incorrect
    "#{hangman.word.mask} life left: #{hangman.life} incorrect guesses: #{hangman.guesses}"
  end
end

class PinkmanHangmanTemplate < BasicHangmanTemplate
  def initialization
    [super, "yo!"].join(' ')
  end
end

class Word
  attr_reader :secret

  def initialize(secret, char = "_")
    @secret = secret
    @letters = Array.new(secret.length) { char }
  end

  def guess(letter)
    guessed = false
    secret.each_char.with_index { |char, i| @letters[i], guessed = char, true if char == letter }
    guessed
  end

  def completed?
    secret == mask
  end

  def mask
    @letters.join
  end
end

class Hangman
  attr_reader :word, :guesses, :life

  def initialize(word, life: 6, template: HangmanTemplate)
    @word = word
    @guesses = ""
    @life = life
    @render = template.new(self)

    puts @render.initialization
  end

  def guess(letter)
    if word.guess(letter)
      if word.completed?
        puts @render.won
      else
        if guesses.empty?
          puts @render.correct
        else
          puts @render.incorrect
        end
      end
    else
      @life -= 1

      if life.zero?
        puts @render.lost
      else
        @guesses += letter
        puts @render.incorrect
      end
    end
  end
end

# word = Word.new("apple", "_")
# hangman = Hangman.new(word, template: BasicHangmanTemplate)
# %w[a b q z e p l].each do |letter|
#   hangman.guess(letter)
# end

# word = Word.new("quixotic", "*")
# hangman = Hangman.new(word, template: PinkmanHangmanTemplate)
# %w[a e i o u l g p r].each do |letter|
#   hangman.guess(letter)
# end

File.readlines(ARGV[0], chomp: true).each do |line|
  next if line.empty?

  if line.length == 1
    @hangman.guess(line)
  else
    word = Word.new(line)
    @hangman = Hangman.new(word, template: BasicHangmanTemplate)
  end
end
